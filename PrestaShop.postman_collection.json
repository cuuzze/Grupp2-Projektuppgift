{
	"info": {
		"_postman_id": "d45095fd-7f05-4792-892c-6d9914e7390f",
		"name": "PrestaShop",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Log out",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request: status code 200 or 201\", () => {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
							"});\r",
							"\r",
							"const respBd = pm.response.text()\r",
							"\r",
							"get_name = respBd.slice(respBd.indexOf(\"firstname\") +11, respBd.indexOf(\"email\") -2);\r",
							"pm.test(\"Check that firstname is null\", function (){\r",
							"pm.expect(get_name).to.eql(\"null\")\r",
							"});\r",
							"\r",
							"get_logged = respBd.slice(respBd.indexOf(\"is_logged\") +11, respBd.indexOf(\"gender\") -2);\r",
							"pm.test(\"Check that the user is not logged in\", function (){\r",
							"pm.expect(get_logged).to.eql(\"false\")\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.addQueryParams({\r",
							"    key: \"mylogout\"\r",
							"});\r",
							"\r",
							"pm.request.addQueryParams({\r",
							"    key: \"ws_key\",\r",
							"    value: \"EMLX2FKDSD1C7V6UDXVBMEWBCAK7U6WK\"\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "EMLX2FKDSD1C7V6UDXVBMEWBCAK7U6WK",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Auth",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Create user & login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const respBd = pm.response.text(), \r",
							"static_token = respBd.slice(respBd.indexOf(\"static_token\") +15, respBd.indexOf(\"token\") +40);\r",
							"\r",
							"pm.environment.set(\"customerToken\", static_token)\r",
							"\r",
							"pm.test(\"Successful POST request: status code 200 or 201\", () => {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
							"});\r",
							"\r",
							" //check the name of the created user is the same as the one generated through postman\r",
							"get_name = respBd.slice(respBd.indexOf(\"firstname\") +12, respBd.indexOf(\"email\") -3);\r",
							"set_user = pm.request.url.query.toObject().firstname\r",
							"pm.test(\"Check the user's name\", function (){\r",
							"pm.expect(get_name).to.eql(set_user)\r",
							"});\r",
							"\r",
							"get_email = respBd.slice(respBd.indexOf(\"email\") +8, respBd.indexOf(\"birthday\") -3);\r",
							"set_email = pm.request.url.query.toObject().email\r",
							"pm.test(\"Check the user's email\", function (){\r",
							"pm.expect(get_email).to.eql(set_email)\r",
							"});\r",
							"\r",
							"get_logged = respBd.slice(respBd.indexOf(\"is_logged\") +11, respBd.indexOf(\"gender\") -2);\r",
							"pm.test(\"Check that the user is logged in\", function (){\r",
							"pm.expect(get_logged).to.eql(\"true\")\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const rEmail = pm.environment.get('randomEmail'), rFirst = pm.environment.get('randomFirstName'), rLast = pm.environment.get('randomLastName');\r",
							"\r",
							"pm.request.addQueryParams({\r",
							"    key: \"create_account\",\r",
							"    value: \"1\"\r",
							"});\r",
							"\r",
							"pm.request.addQueryParams({\r",
							"    key: \"ws_key\",\r",
							"    value: \"EMLX2FKDSD1C7V6UDXVBMEWBCAK7U6WK\"\r",
							"})\r",
							"\r",
							"pm.request.addQueryParams({\r",
							"    key: \"firstname\",\r",
							"    value: \"{{randomFirstName}}\"\r",
							"});\r",
							"\r",
							"pm.request.addQueryParams({\r",
							"    key: \"lastname\",\r",
							"    value: \"{{randomLastName}}\"\r",
							"});\r",
							"\r",
							"pm.request.addQueryParams({\r",
							"    key: \"email\",\r",
							"    value: \"{{randomEmail}}\"\r",
							"});\r",
							"\r",
							"pm.request.addQueryParams({\r",
							"    key: \"password\",\r",
							"    value: \"12345\"\r",
							"});\r",
							"\r",
							"pm.request.addQueryParams({\r",
							"    key: \"customer_privacy\",\r",
							"    value: \"1\"\r",
							"});\r",
							"\r",
							"pm.request.addQueryParams({\r",
							"    key: \"psgdpr\",\r",
							"    value: \"1\"\r",
							"});\r",
							"\r",
							"pm.request.addQueryParams({\r",
							"    key: \"submitCreate\",\r",
							"    value: \"1\"\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "xml"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add to cart",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.addQueryParams({\r",
							"    key: \"token\",\r",
							"    value: \"{{customerToken}}\"\r",
							"});\r",
							"\r",
							"pm.request.addQueryParams({\r",
							"    key: \"add\",\r",
							"    value: \"1\"\r",
							"});\r",
							"\r",
							"pm.request.addQueryParams({\r",
							"    key: \"ws_key\",\r",
							"    value: \"N3GURVIGKHCY725K9YFEMESRXERVAJY6\"\r",
							"})\r",
							"\r",
							"pm.request.addQueryParams({\r",
							"    key: \"qty\",\r",
							"    value: \"1\"\r",
							"})\r",
							"\r",
							"pm.request.addQueryParams({\r",
							"    key: \"id_product\",\r",
							"    value: \"5\"\r",
							"})\r",
							"\r",
							"pm.request.addQueryParams({\r",
							"    key: \"id_product_attribute\",\r",
							"    value: \"0\"\r",
							"})"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const respBd = pm.response.text(), \r",
							"ctoken = respBd.slice(respBd.indexOf(\"debug\") -35, respBd.indexOf(\"debug\") -3);\r",
							"\r",
							"\r",
							"pm.environment.set(\"checkOutToken\", ctoken);\r",
							"\r",
							"pm.test(\"Successful POST request: status code 200 or 201\", () => {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
							"});\r",
							"\r",
							"get_quantity = respBd.slice(respBd.indexOf(\"cart_quantity\") +16, respBd.indexOf(\"cart_quantity\") +17);\r",
							"pm.test(\"Check the cart quantity is = 1\", function (){\r",
							"    pm.expect(get_quantity).to.eql(\"1\")\r",
							"});\r",
							"\r",
							"get_quantity = respBd.slice(respBd.indexOf(\"id_feature_value\") -4, respBd.indexOf(\"id_feature_value\") -3);\r",
							"pm.test(\"Check the product id = 5\", function (){\r",
							"    pm.expect(get_quantity).to.eql(\"5\")\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/cart",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"cart"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check out items Addresses",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const rAddress = pm.environment.get('randomAddress'), rCity = pm.environment.get('randomCity');\r",
							"\r",
							"\r",
							"pm.request.addQueryParams({\r",
							"    key: \"ws_key\",\r",
							"    value: \"58RITWB56ZMT4NYXFHY7EWD9HWIQV46Q\"\r",
							"});\r",
							"\r",
							"\r",
							"pm.request.addQueryParams({\r",
							"    key: \"address1\",\r",
							"    value: \"{{randomAddress}}\"\r",
							"});\r",
							"\r",
							"pm.request.addQueryParams({\r",
							"    key: \"city\",\r",
							"    value: \"{{randomCity}}\"\r",
							"});\r",
							"\r",
							"pm.request.addQueryParams({\r",
							"    key: \"id_state\",\r",
							"    value: \"8\"\r",
							"});\r",
							"\r",
							"\r",
							"pm.request.addQueryParams({\r",
							"    key: \"postcode\",\r",
							"    value: \"88888\"\r",
							"});\r",
							"\r",
							"pm.request.addQueryParams({\r",
							"    key: \"saveAddress\",\r",
							"    value: \"delivery\"\r",
							"});\r",
							"\r",
							"pm.request.addQueryParams({\r",
							"    key: \"token\",\r",
							"    value: \"{{checkOutToken}}\"\r",
							"});\r",
							"\r",
							"pm.request.addQueryParams({\r",
							"    key: \"confirm-addresses\",\r",
							"    value: \"1\"\r",
							"});\r",
							"\r",
							"pm.request.addQueryParams({\r",
							"    key: \"use_same_address\",\r",
							"    value: \"1\",    \r",
							"\r",
							"});\r",
							"\r",
							"pm.request.addQueryParams({\r",
							"    key: \"submitAddress\",\r",
							"    value: \"1\",    \r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request: status code 200 or 201\", () => {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
							"});\r",
							"\r",
							"const respBd = pm.response.text()\r",
							"\r",
							"get_country = respBd.slice(respBd.indexOf(\"country\") +25, respBd.indexOf(\"country\") +38);\r",
							"pm.test(\"Check that the country is United States\", function (){\r",
							"pm.expect(get_country).to.eql(\"United States\")\r",
							"});\r",
							"\r",
							"get_state = respBd.slice(respBd.indexOf(\"id_state\") +11, respBd.indexOf(\"id_state\") +12);\r",
							"pm.test(\"Check that the state id is 8\", function (){\r",
							"pm.expect(get_state).to.eql(\"8\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "xml"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/order",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"order"
					]
				}
			},
			"response": []
		},
		{
			"name": "Shipping",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.addQueryParams({\r",
							"    key: \"ws_key\",\r",
							"    value: \"58RITWB56ZMT4NYXFHY7EWD9HWIQV46Q\"\r",
							"});\r",
							"\r",
							"\r",
							"pm.request.addQueryParams({\r",
							"    key: \"confirmDeliveryOption\",\r",
							"    value: \"1\"\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const respBd = pm.response.text()\r",
							"\r",
							"pm.test(\"Successful POST request: status code 200 or 201\", () => {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
							"});\r",
							"\r",
							"get_quantity = respBd.slice(respBd.indexOf(\"ecotax\") +28, respBd.indexOf(\"ecotax\") +34);\r",
							"pm.test(\"Check that the total value of the item is $29\", function (){\r",
							"    pm.expect(get_quantity).to.eql(\"$29.00\")\r",
							"});\r",
							"\r",
							"\r",
							"get_quantity2 = respBd.slice(respBd.indexOf(\"subtotals\") -11, respBd.indexOf(\"subtotals\") -5);\r",
							"pm.test(\"Check that it that the item costs $36 after tax\", function (){\r",
							"    pm.expect(get_quantity2).to.eql(\"$36.00\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "xml"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/order",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"order"
					]
				}
			},
			"response": []
		},
		{
			"name": "Payment",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.addQueryParams({\r",
							"    key: \"ws_key\",\r",
							"    value: \"58RITWB56ZMT4NYXFHY7EWD9HWIQV46Q\"\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request: status code 200 or 201\", () => {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
							"});\r",
							"\r",
							"const respBd = pm.response.text()\r",
							"\r",
							"get_value = respBd.slice(respBd.indexOf(\"value\") +8, respBd.indexOf(\"value\") +13);\r",
							"pm.test(\"Check that the value is 0.00\", function (){\r",
							"pm.expect(get_value).to.eql(\"$0.00\")\r",
							"});\r",
							"\r",
							"get_orderConfirmation = respBd.slice(respBd.indexOf(\"page-order-confirmation\") +25, respBd.indexOf(\"page-order-confirmation\") +29);\r",
							"pm.test(\"Check that the order is confirmed\", function (){\r",
							"pm.expect(get_orderConfirmation).to.eql(\"true\")\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "xml"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/{{paymentValidation}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"{{paymentValidation}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"const respBd = pm.response.text();",
					"",
					"pm.test(\"COLLECTION TEST | check if active environment is correct\", () => {",
					"        pm.expect(pm.environment.name).to.eql(\"PrestaShop_Environment\");",
					"});",
					"",
					"pm.test(\"COLLECTION TEST | check if there is an active, error free body\", () => {",
					"    pm.response.to.be.ok;",
					"    pm.response.to.be.withBody;",
					"    pm.response.to.not.be.error;",
					"    pm.expect(respBd).to.contain('text');",
					"});"
				]
			}
		}
	]
}